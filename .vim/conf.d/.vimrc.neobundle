" ------------------------------------------------------------
" neobundle開始処理:
" ------------------------------------------------------------
" 一旦ファイルタイプ関連を無効化する
filetype off

" runtimepathに追加
if has('vim_starting')
  if &runtimepath !~ expand('~/.vim/bundle/neobundle.vim')
    execute 'set runtimepath^=' . expand('~/.vim/bundle/neobundle.vim')
  endif
endif

" neobundleの初期化
call neobundle#begin(expand('~/.vim/bundle/'))

" NeoBundleの読込み
NeoBundleFetch 'Shougo/neobundle.vim'




" ------------------------------------------------------------
" neobundleプラグイン読込関連開始:
" ------------------------------------------------------------
" molokai: カラースキーム
NeoBundle 'tomasr/molokai'

" lightline.vim: ステータスラインのカスタマイズ
NeoBundle 'itchyny/lightline.vim'

" unite.vim:
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/neomru.vim'

" vimfiler: ファイラー
NeoBundle 'Shougo/vimfiler'

" vimproc: 非同期処理のため
NeoBundle 'Shougo/vimproc' , {
      \ 'build' : {
      \     'windows' : 'echo "Sorry, cannot update vimproc binary file in Windows."',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make -f make_mac.mak',
      \     'unix' : 'make -f make_unix.mak',
      \    },
      \ }

" vimshell:
NeoBundle 'Shougo/vimshell'

" vimdoc-ja: vimの日本語マニュアル
NeoBundle 'vim-jp/vimdoc-ja'

" vim-gitgutter: gitの変更行のカラー表示
NeoBundle 'airblade/vim-gitgutter'

" vim-fugitive: git操作
NeoBundle 'tpope/vim-fugitive'

" tcomment_vim: コメントアウトの切替
NeoBundle 'tomtom/tcomment_vim'

" surround.vim:
NeoBundle 'surround.vim'

" カット＆ペースト
NeoBundle 'ConradIrwin/vim-bracketed-paste'


" ------------------------------------------------------------
" neobundleプラグイン読込関連終了:
" ------------------------------------------------------------




" ------------------------------------------------------------
" neobundle終了処理関連:
" ------------------------------------------------------------
" NeoBundleの終了処理設定
call neobundle#end()

" ファイルタイプ関連を有効にする
filetype plugin indent on

" プラグインのチェック
NeoBundleCheck




" ------------------------------------------------------------
" 各種プラグイン設定:
" ------------------------------------------------------------
" --------------------------------------------------
" lightline.vim:
" --------------------------------------------------
" カラースキームをlandscapeにする
let g:lightline = {
        \ 'colorscheme': 'landscape',
        \ 'mode_map': {'c': 'NORMAL'},
        \ 'active': {
        \   'left': [
        \     ['mode', 'paste'],
        \     ['fugitive', 'gitgutter', 'filename'],
        \   ],
        \   'right': [
        \     ['lineinfo', 'syntastic'],
        \     ['percent'],
        \     ['charcode', 'fileformat', 'fileencoding', 'filetype'],
        \   ]
        \ },
        \ 'component_function': {
        \   'modified': 'MyModified',
        \   'readonly': 'MyReadonly',
        \   'fugitive': 'MyFugitive',
        \   'filename': 'MyFilename',
        \   'fileformat': 'MyFileformat',
        \   'filetype': 'MyFiletype',
        \   'fileencoding': 'MyFileencoding',
        \   'mode': 'MyMode',
        \   'syntastic': 'SyntasticStatuslineFlag',
        \   'charcode': 'MyCharCode',
        \   'gitgutter': 'MyGitGutter',
        \ },
        \ 'separator': {'left': '', 'right': ''},
        \ 'subseparator': {'left': '', 'right': ''}
        \ }

function! MyModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &ro ? '⭤' : ''
endfunction

function! MyFilename()
  return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? substitute(b:vimshell.current_dir,expand('~'),'~','') :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
  try
    if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
      let _ = fugitive#head()
      return strlen(_) ? '⭠ '._ : ''
    endif
  catch
  endtry
  return ''
endfunction

function! MyFileformat()
  return winwidth('.') > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
  return winwidth('.') > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
  return winwidth('.') > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
  return winwidth('.') > 60 ? lightline#mode() : ''
endfunction

function! MyGitGutter()
  if ! exists('*GitGutterGetHunkSummary')
        \ || ! get(g:, 'gitgutter_enabled', 0)
        \ || winwidth('.') <= 90
    return ''
  endif
  let symbols = [
        \ g:gitgutter_sign_added . ' ',
        \ g:gitgutter_sign_modified . ' ',
        \ g:gitgutter_sign_removed . ' '
        \ ]
  let hunks = GitGutterGetHunkSummary()
  let ret = []
  for i in [0, 1, 2]
    if hunks[i] > 0
      call add(ret, symbols[i] . hunks[i])
    endif
  endfor
  return join(ret, ' ')
endfunction

" https://github.com/Lokaltog/vim-powerline/blob/develop/autoload/Powerline/Functions.vim
function! MyCharCode()
  if winwidth('.') <= 70
    return ''
  endif

  " Get the output of :ascii
  redir => ascii
  silent! ascii
  redir END

  if match(ascii, 'NUL') != -1
    return 'NUL'
  endif

  " Zero pad hex values
  let nrformat = '0x%02x'

  let encoding = (&fenc == '' ? &enc : &fenc)

  if encoding == 'utf-8'
    " Zero pad with 4 zeroes in unicode files
    let nrformat = '0x%04x'
  endif

  " Get the character and the numeric value from the return value of :ascii
  " This matches the two first pieces of the return value, e.g.
  " "<F>  70" => char: 'F', nr: '70'
  let [str, char, nr; rest] = matchlist(ascii, '\v\<(.{-1,})\>\s*([0-9]+)')

  " Format the numeric value
  let nr = printf(nrformat, nr)

  return "'". char ."' ". nr
endfunction


" --------------------------------------------------
" vimfiler:
" --------------------------------------------------
" netrwの代わりにvimfilerを使用する
let g:vimfiler_as_default_explorer = 1

" 隠しファイルを表示
"let g:vimfiler_ignore_pattern = ''

" ディレクトリを広げた場合、カーソルの場所をそのままにする
let g:vimfiler_expand_jump_to_first_child=0


" --------------------------------------------------
" vim-gitgutter:
" --------------------------------------------------
" vim-gitgutterを有効にする
let g:gitgutter_enabled = 1

" リアルタイムで有効にする
let g:gitgutter_realtime = 1


" --------------------------------------------------
" Unite
" --------------------------------------------------
let g:unite_enable_start_insert = 0
let g:unite_enable_split_vertically = 0
let g:unite_winwidth = 40
